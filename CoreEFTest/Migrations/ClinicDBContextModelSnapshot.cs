// <auto-generated />
using System;
using CoreEFTest.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CoreEFTest.Migrations
{
    [DbContext(typeof(ClinicDBContext))]
    partial class ClinicDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CoreEFTest.Models.EarCast", b =>
                {
                    b.Property<int>("EarCastID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CastDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EarSide")
                        .HasColumnType("int");

                    b.Property<int>("PatientFK")
                        .HasColumnType("int");

                    b.HasKey("EarCastID");

                    b.HasIndex("PatientFK");

                    b.ToTable("EarCast");
                });

            modelBuilder.Entity("CoreEFTest.Models.GeneralSpec", b =>
                {
                    b.Property<int>("HAGeneralSpecID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Color")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EarSide")
                        .HasColumnType("int");

                    b.Property<int>("PatientFK")
                        .HasColumnType("int");

                    b.Property<int>("StaffLoginFK")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("HAGeneralSpecID");

                    b.HasIndex("PatientFK");

                    b.HasIndex("StaffLoginFK");

                    b.ToTable("GeneralSpecs");
                });

            modelBuilder.Entity("CoreEFTest.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Age")
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.Property<string>("CPR")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("MobilNummer")
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<int>("zipcode")
                        .HasMaxLength(4)
                        .HasColumnType("int");

                    b.HasKey("PatientId");

                    b.ToTable("Patient");
                });

            modelBuilder.Entity("CoreEFTest.Models.RawEarPrint", b =>
                {
                    b.Property<int>("EarPrintID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EarSide")
                        .HasColumnType("int");

                    b.Property<DateTime>("PrintDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StaffLoginFK")
                        .HasColumnType("int");

                    b.Property<int>("TecnicalSpecFK")
                        .HasColumnType("int");

                    b.HasKey("EarPrintID");

                    b.HasIndex("StaffLoginFK");

                    b.HasIndex("TecnicalSpecFK");

                    b.ToTable("RawEarPrints");
                });

            modelBuilder.Entity("CoreEFTest.Models.RawEarScan", b =>
                {
                    b.Property<int>("ScanID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EarSide")
                        .HasColumnType("int");

                    b.Property<byte[]>("Scan")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("ScanDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StaffLoginFK")
                        .HasColumnType("int");

                    b.Property<int>("TecnicalSpecFK")
                        .HasColumnType("int");

                    b.HasKey("ScanID");

                    b.HasIndex("StaffLoginFK");

                    b.HasIndex("TecnicalSpecFK")
                        .IsUnique();

                    b.ToTable("RawEarScans");
                });

            modelBuilder.Entity("CoreEFTest.Models.StaffLogin", b =>
                {
                    b.Property<int>("StaffID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.Property<int>("StaffStatus")
                        .HasColumnType("int");

                    b.HasKey("StaffID");

                    b.ToTable("StaffLogin");
                });

            modelBuilder.Entity("CoreEFTest.Models.TecnicalSpec", b =>
                {
                    b.Property<int>("HATechinalSpecID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EarSide")
                        .HasColumnType("int");

                    b.Property<int>("GeneralSpecFK")
                        .HasColumnType("int");

                    b.Property<int>("PatientFK")
                        .HasColumnType("int");

                    b.Property<bool>("Printed")
                        .HasColumnType("bit");

                    b.Property<int>("StaffLoginFK")
                        .HasColumnType("int");

                    b.HasKey("HATechinalSpecID");

                    b.HasIndex("GeneralSpecFK");

                    b.HasIndex("PatientFK");

                    b.HasIndex("StaffLoginFK");

                    b.ToTable("TecnicalSpecs");
                });

            modelBuilder.Entity("CoreEFTest.Models.EarCast", b =>
                {
                    b.HasOne("CoreEFTest.Models.Patient", "Patient")
                        .WithMany("EarCasts")
                        .HasForeignKey("PatientFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("CoreEFTest.Models.GeneralSpec", b =>
                {
                    b.HasOne("CoreEFTest.Models.Patient", "Patient")
                        .WithMany("GeneralSpecs")
                        .HasForeignKey("PatientFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreEFTest.Models.StaffLogin", "StaffLogin")
                        .WithMany()
                        .HasForeignKey("StaffLoginFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("StaffLogin");
                });

            modelBuilder.Entity("CoreEFTest.Models.RawEarPrint", b =>
                {
                    b.HasOne("CoreEFTest.Models.StaffLogin", "StaffLogin")
                        .WithMany()
                        .HasForeignKey("StaffLoginFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreEFTest.Models.TecnicalSpec", "TecnicalSpec")
                        .WithMany("EarPrints")
                        .HasForeignKey("TecnicalSpecFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffLogin");

                    b.Navigation("TecnicalSpec");
                });

            modelBuilder.Entity("CoreEFTest.Models.RawEarScan", b =>
                {
                    b.HasOne("CoreEFTest.Models.StaffLogin", "StaffLogin")
                        .WithMany()
                        .HasForeignKey("StaffLoginFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreEFTest.Models.TecnicalSpec", "TecnicalSpec")
                        .WithOne("RawEarScan")
                        .HasForeignKey("CoreEFTest.Models.RawEarScan", "TecnicalSpecFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffLogin");

                    b.Navigation("TecnicalSpec");
                });

            modelBuilder.Entity("CoreEFTest.Models.TecnicalSpec", b =>
                {
                    b.HasOne("CoreEFTest.Models.GeneralSpec", "GeneralSpec")
                        .WithMany()
                        .HasForeignKey("GeneralSpecFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreEFTest.Models.Patient", "Patient")
                        .WithMany("TecnicalSpecs")
                        .HasForeignKey("PatientFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreEFTest.Models.StaffLogin", "StaffLogin")
                        .WithMany()
                        .HasForeignKey("StaffLoginFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GeneralSpec");

                    b.Navigation("Patient");

                    b.Navigation("StaffLogin");
                });

            modelBuilder.Entity("CoreEFTest.Models.Patient", b =>
                {
                    b.Navigation("EarCasts");

                    b.Navigation("GeneralSpecs");

                    b.Navigation("TecnicalSpecs");
                });

            modelBuilder.Entity("CoreEFTest.Models.TecnicalSpec", b =>
                {
                    b.Navigation("EarPrints");

                    b.Navigation("RawEarScan");
                });
#pragma warning restore 612, 618
        }
    }
}
